// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.networktables.NetworkTableInstance;
import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;

import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;
import edu.wpi.first.wpilibj.RobotDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class drive extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private WPI_TalonFX talonFX1;
private WPI_TalonFX talonFX2;
private WPI_TalonFX talonFX3;
private WPI_TalonFX talonFX4;
private RobotDrive robotDrive41;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    
    private DoubleSolenoid shiftingSolenoid;


    private static final double WHEEL_DIAMETER = 6.0;
    private static final double INCHES_PER_REVOLUTION = WHEEL_DIAMETER * Math.PI;		
    private static final double PULSES_PER_REVOLUTION = 1024 * 4;

    private ADXRS450_Gyro Gyro = new ADXRS450_Gyro();
    
 /* //   private CANEncoder rightEncoder = sparkMAX1.getEncoder();
 //   private CANEncoder leftEncoder = sparkMAX3.getEncoder();
    private Ultrasonic leftUltra = new Ultrasonic(0, 1);
    private Ultrasonic rightUltra = new Ultrasonic(2, 3);
    private ADXRS450_Gyro FRCGyro = new ADXRS450_Gyro();
 
    public double m_LinesDriveCommand = 0.0;
    public double m_LinesSteerCommand = 0.0;
 
    public boolean m_LimelightHasValidTarget = false;
    public double m_LimelightDriveCommand = 0.0;
    public double m_LimelightSteerCommand = 0.0;
    public double tx; */

    public boolean m_LimelightHasValidTarget = false;

    public boolean driverMode = true;

    public drive() {

        shiftingSolenoid = new DoubleSolenoid(0, 0, 1);
        addChild("ShiftingSolenoid",shiftingSolenoid);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
talonFX1 = new WPI_TalonFX(12);


        
talonFX2 = new WPI_TalonFX(13);


        
talonFX3 = new WPI_TalonFX(3);


        
talonFX4 = new WPI_TalonFX(2);


        
robotDrive41 = new RobotDrive(talonFX1, talonFX2,
talonFX3, talonFX4);

robotDrive41.setSafetyEnabled(false);
robotDrive41.setExpiration(0.1);
robotDrive41.setSensitivity(0.5);
robotDrive41.setMaxOutput(1.0);

        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new JoystickDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

            getEncoderCount();
            getRightEncoderCount();
            getLeftEncoderCount();
            getCurrentPositionInInches();
            SmartDashboard.putNumber("Right Encoder", getRightEncoderCount());
            SmartDashboard.putNumber("Left Encoder", getLeftEncoderCount()); 
            SmartDashboard.putNumber("Encoder", getEncoderCount());
            SmartDashboard.putNumber("Current Position In Inches", getCurrentPositionInInches());

            SmartDashboard.putNumber("Gyro", getAngle());

            SmartDashboard.putBoolean("HasValidTarget", getLimelightTarget());

    //        SmartDashboard.putBoolean("High Gear", getShiftingSolenoid());

/*      SmartDashboard.putNumber("Right Encoder", getRightEncoder());
        SmartDashboard.putNumber("Left Encoder", getLeftEncoder());       
        SmartDashboard.putBoolean("Is Driver Control", isDriverControlMode);
        SmartDashboard.putNumber("tx", Math.abs(tx)); 
        SmartDashboard.putNumber("Gyro", getAngle());
        SmartDashboard.putNumber("Left Ultrasonic", leftUltra.getRangeInches());
        SmartDashboard.putNumber("Right Ultrasonic", rightUltra.getRangeInches()); */

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

 //   public void joystickInput (Joystick stick) {
   //     double localSpeedVar = .95;
     //   robotDrive41.tankDrive(stick.getRawAxis(5)*localSpeedVar, stick.getRawAxis(1)*localSpeedVar);
    //}
public void shift() {
            System.out.println("Start Shift");
            if(shiftingSolenoid.get() != Value.kForward) {
                shiftingSolenoid.set(Value.kForward);
                SmartDashboard.putBoolean("High Gear", true);
        //        System.out.println("Shifted forward");
            } else {
                shiftingSolenoid.set(Value.kReverse);
                SmartDashboard.putBoolean("High Gear", false);
        //        System.out.println("Shifted Backward");
    }
}

/*public boolean getShiftingSolenoid() {
    if(shiftingSolenoid.get() != Value.kForward) {
        return SmartDashboard.putBoolean("High Gear", true);
    } else {
        return SmartDashboard.putBoolean("High Gear", false);
}
} */

 /*      if(DriverStation.getInstance().getMatchTime() > 29 &&  DriverStation.getInstance().getMatchTime() < 31 && DriverStation.getInstance().isOperatorControl()) {
            stick.setRumble(RumbleType.kLeftRumble, 1);
        } else if(DriverStation.getInstance().getMatchTime() <= 29 && DriverStation.getInstance().isOperatorControl()) {
            stick.setRumble(RumbleType.kLeftRumble, 0);
        } */

        public void joystickInput (Joystick stick) {
            if (driverMode == true) {
                double localSpeedVar = -.80;
                robotDrive41.tankDrive(stick.getRawAxis(1)*localSpeedVar, stick.getRawAxis(5)*localSpeedVar);
            } else {
                double localSpeedVar = .80;
                robotDrive41.tankDrive(stick.getRawAxis(5)*localSpeedVar, stick.getRawAxis(1)*localSpeedVar);
            }

        }
    
        public boolean toggleJoystickInput() {
            if(driverMode != true) {
               return driverMode = true;
            } else {
                return driverMode = false;
            }
        }

        public void turn(double speed) {
            robotDrive41.tankDrive(speed, -speed);
        }
        
        public void turnLeft(double speed) {
            robotDrive41.tankDrive(speed, -speed);
        }
       
        public void turnRight(double speed) {
            robotDrive41.tankDrive(-speed, speed);
        }   

        public void arcadeTurn(double speed, double angle) {
            robotDrive41.arcadeDrive(speed, angle);
        }

        public void driveStraight(double speed) {
            robotDrive41.tankDrive(-speed, -speed);
        }

        public void stop() {
            robotDrive41.tankDrive(0, 0);
        }

        public double convertInchesToEncoderTicks (double inches) {
            double encoderTicks = 0;
            encoderTicks = (inches *(PULSES_PER_REVOLUTION/INCHES_PER_REVOLUTION));
            return encoderTicks;
        }
        
        public double getCurrentPositionInInches () {
            return (getEncoderCount()/(PULSES_PER_REVOLUTION/INCHES_PER_REVOLUTION));
        }

        public double getEncoderCount() {
            return talonFX1.getSelectedSensorPosition();
        }

        public double getRightEncoderCount() {
            return talonFX1.getSelectedSensorPosition();
        }

        public double getLeftEncoderCount() {
            return talonFX4.getSelectedSensorPosition();
        }

      public double getAngle() {
           return Gyro.getAngle();
        }

        public void resetGyro() {
            Gyro.reset();
        } 

        public boolean getLimelightTarget() {
            double tv = NetworkTableInstance.getDefault().getTable("limelight").getEntry("tv").getDouble(0);
            if (tv < 1.0) {
               return m_LimelightHasValidTarget = false;
            } else {
               return m_LimelightHasValidTarget = true;
            }

        }

      /*    public double getLeftEncoder() {
            return leftEncoder.getPosition();
        }

        public double getRightEncoder() {
            return rightEncoder.getPosition();
        } 

        public void updateLimelightTracking() {
        // These numbers must be tuned for your Robot! Be careful!

        final double STEER_K = 0.05; // how hard to turn toward the target
        final double DRIVE_K = 0.1; // how hard to drive fwd toward the target
        final double DESIRED_TARGET_AREA = 45.0; // Area of the target when the robot reaches the wall
        final double MAX_DRIVE = 0.45; // Simple speed limit so we don't drive too fast
        double tv = NetworkTableInstance.getDefault().getTable("limelight").getEntry("tv").getDouble(0);
        double tx = NetworkTableInstance.getDefault().getTable("limelight").getEntry("tx").getDouble(0);
        double ty = NetworkTableInstance.getDefault().getTable("limelight").getEntry("ty").getDouble(0);
        double ta = NetworkTableInstance.getDefault().getTable("limelight").getEntry("ta").getDouble(0);
        if (tv < 1.0) {
            m_LimelightHasValidTarget = false;
            m_LimelightDriveCommand = 0.0;
            m_LimelightSteerCommand = 0.0;

            SmartDashboard.putBoolean("HasValidTarget", m_LimelightHasValidTarget);
     //       SmartDashboard.putNumber("Drive Command", m_LimelightDriveCommand);
      //      SmartDashboard.putNumber("Steer Command", m_LimelightSteerCommand);
             
            return; 
            }
            m_LimelightHasValidTarget = true;
            isDriverControlMode = false;
            // Start with proportional steering
            double steer_cmd = tx * STEER_K;
            m_LimelightSteerCommand = steer_cmd;
            // try to drive forward until the target area reaches our desired area
            double drive_cmd = (DESIRED_TARGET_AREA - ta) * DRIVE_K;
            // don't let the robot drive too fast into the goal
           
            SmartDashboard.putBoolean("HasValidTarget", m_LimelightHasValidTarget);
 //           SmartDashboard.putNumber("Drive Command", m_LimelightDriveCommand);
 //           SmartDashboard.putNumber("Steer Command", m_LimelightSteerCommand);

            if (drive_cmd > MAX_DRIVE) {
                drive_cmd = MAX_DRIVE;
            }
            m_LimelightDriveCommand = drive_cmd;
} 
} */

}
